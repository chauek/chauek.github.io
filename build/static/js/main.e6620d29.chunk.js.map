{"version":3,"sources":["Components/AllInOneChart.tsx","Components/CountryAllChart.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AllInOneChart","props","defaultDataset","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","activeData","labels","datasets","Object","assign","confirmedData","recoveredData","deathsData","options","maintainAspectRatio","CountryAllChart","useState","isOpen","setOpened","country","summary","confirmed","recovered","deaths","active","className","key","onClick","keys","values","addActiveDataToCountry","destination","countries","i","length","countryRow","dates","j","date","addDataToCountry","dataInput","row","filter","k","match","forEach","reformattedDate","moment","format","parseInt","getCountrySummary","byCountry","byCountrySummary","confKeys","recKeys","deKeys","getCsvData","url","a","fetchCsv","csvData","Papa","parse","header","fetch","then","response","body","reader","getReader","decoder","TextDecoder","read","result","decode","value","App","isLoaded","setLoaded","setByCountry","countriesByConfirmed","setCountriesByConfirmed","setByCountrySummary","Promise","all","console","log","map","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e6620d29.chunk.js","sourcesContent":["import * as chartjs from 'chart.js';\nimport React from 'react';\nimport { ChartData, Line } from 'react-chartjs-2';\n\ninterface IAllInOneChartProps {\n  labels: string[],\n  activeData: number[],\n  confirmedData: number[],\n  recoveredData: number[],\n  deathsData: number[],\n}\n\nexport const AllInOneChart = (props: IAllInOneChartProps) => {\n\n  const defaultDataset = {\n    label: 'Active',\n    fill: false,\n    lineTension: 0.1,\n    backgroundColor: 'rgba(192,92,41,0.4)',\n    borderColor: 'rgb(192,92,41)',\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: 'rgba(192,92,41,1)',\n    pointBackgroundColor: '#fff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: 'rgba(192,92,41,1)',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointHoverBorderWidth: 2,\n    pointRadius: 4,\n    pointHitRadius: 10,\n    data: props.activeData,\n  };\n\n  const data: ChartData<chartjs.ChartData> = {\n    labels: props.labels,\n    datasets: [\n      Object.assign({}, defaultDataset,\n        {\n          label: 'Confirmed',\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgb(99,255,255)',\n          pointBackgroundColor: 'rgb(99,255,255)',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          data: props.confirmedData,\n        }),\n      Object.assign({}, defaultDataset,\n      {\n        label: 'Active',\n        backgroundColor: 'rgba(192,92,41,0.4)',\n        borderColor: 'rgb(255,122,54)',\n        pointBackgroundColor: 'rgb(255,122,54)',\n        pointBorderColor: 'rgba(192,92,41,1)',\n        pointHoverBackgroundColor: 'rgba(192,92,41,1)',\n        data: props.activeData,\n      }),\n      Object.assign({}, defaultDataset,\n      {\n        label: 'Recovered',\n        backgroundColor: 'rgba(113,192,56,0.4)',\n        borderColor: 'rgb(113,192,56)',\n        pointBorderColor: 'rgb(113,192,56)',\n        pointBackgroundColor: 'rgb(167,255,65)',\n        pointHoverBackgroundColor: 'rgb(113,192,56)',\n        data: props.recoveredData,\n      }),\n      Object.assign({}, defaultDataset,\n      {\n        label: 'Deaths',\n        backgroundColor: 'rgba(188,192,187,0.4)',\n        borderColor: 'rgb(188,192,187)',\n        pointBorderColor: 'rgb(188,192,187)',\n        pointBackgroundColor: 'rgb(251,255,249)',\n        pointHoverBackgroundColor: 'rgb(188,192,187)',\n        data: props.deathsData,\n      })\n    ]\n  };\n\n  return (\n    <Line\n      data={data}\n      options={{ maintainAspectRatio: true }}\n    />\n  );\n};\n","import React, { useState } from 'react';\nimport { IByCountryRow, IByCountrySummaryRow } from '../types';\nimport { AllInOneChart } from './AllInOneChart';\n\ninterface ICountryAllChartProps {\n  country: string,\n  summary: IByCountrySummaryRow,\n  data: IByCountryRow,\n}\n\nexport const CountryAllChart = (props: ICountryAllChartProps) => {\n  const [isOpen, setOpened] = useState(true);\n\n  const { country, summary, data } = props;\n\n  const confirmed = `${summary?.confirmed}` || '-';\n  const recovered = `${summary?.recovered}` || '-';\n  const deaths = `${summary?.deaths}` || '-';\n  const active = `${summary?.active}` || '-';\n\n  return (\n    <div className=\"col-6\" key={country}>\n      <h1><a onClick={() => setOpened(!isOpen)}>{country} <span className=\"active\">{active}</span> <span className=\"confirmed\">{confirmed}</span> <span className=\"recovered\">{recovered}</span> <span className=\"deaths\">{deaths}</span></a></h1>\n      {isOpen &&\n      <AllInOneChart\n        labels={Object.keys(data.confirmed)}\n        confirmedData={Object.values(data.confirmed)}\n        recoveredData={Object.values(data.recovered)}\n        deathsData={Object.values(data.deaths)}\n        activeData={Object.values(data.active)}\n      />\n      }\n    </div>\n  );\n};\n","import Papa from 'papaparse';\nimport React, { useState } from 'react';\nimport './App.css';\nimport { CountryAllChart } from './Components/CountryAllChart';\nimport { Dictionary, IByCountrySummaryRow, TByCountry, TByCountryRowKey, TByCountrySummary } from './types';\nimport moment from 'moment';\n\nfunction App() {\n\n  const confirmedUrl = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv';\n  const deathsUrl = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv';\n  const recoveredUrl = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv';\n\n  const [isLoaded, setLoaded] = useState(false);\n  const [byCountry, setByCountry] = useState({} as TByCountry);\n  const [countriesByConfirmed, setCountriesByConfirmed] = useState([] as string[]);\n  const [byCountrySummary, setByCountrySummary] = useState({} as TByCountrySummary);\n\n  if (!isLoaded) {\n    Promise.all([getCsvData(confirmedUrl), getCsvData(recoveredUrl), getCsvData(deathsUrl)]).then(([confirmed, recovered, deaths]) => {\n      setLoaded(true);\n      console.log('confirmed', confirmed);\n      console.log('recovered', recovered);\n      console.log('deaths', deaths);\n\n      const byCountry: TByCountry = {};\n      addDataToCountry(byCountry, confirmed.data, 'confirmed');\n      addDataToCountry(byCountry, recovered.data, 'recovered');\n      addDataToCountry(byCountry, deaths.data, 'deaths');\n      addActiveDataToCountry(byCountry);\n      console.log('byCountry', byCountry);\n      const byCountrySummary: TByCountrySummary = getCountrySummary(byCountry);\n      console.log('byCountrySummary', byCountrySummary);\n      setByCountry(byCountry);\n      setByCountrySummary(byCountrySummary);\n      const countriesByConfirmed: string[] = Object.keys(byCountry);\n      setCountriesByConfirmed(countriesByConfirmed);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <div className=\"container\">\n          <div className=\"row\">\n            {countriesByConfirmed.map((country, i) => (\n              <CountryAllChart\n                country={country}\n                summary={byCountrySummary[country]}\n                data={byCountry[country]}\n                key={country}\n              ></CountryAllChart>\n            ))}\n          </div>\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nconst addActiveDataToCountry = (destination: TByCountry) => {\n  const countries = Object.keys(destination);\n  for (let i = 0; i < countries.length; i += 1) {\n    const country = countries[i];\n    const countryRow = destination[country];\n    const dates = Object.keys(countryRow.confirmed);\n    for (let j = 0; j < dates.length; j += 1) {\n      const date = dates[j];\n      countryRow.active[date] = countryRow.confirmed[date] - countryRow.recovered[date] - countryRow.deaths[date];\n    }\n  }\n};\n\nconst addDataToCountry = (destination: TByCountry, dataInput: Dictionary<string>[], key: TByCountryRowKey) => {\n  for (let i = 0; i < dataInput.length; i += 1) {\n    const row = dataInput[i];\n    const country = row['Country/Region'];\n    if (!destination[country]) {\n      destination[country] = {\n        confirmed: {},\n        recovered: {},\n        deaths: {},\n        active: {},\n      };\n    }\n\n    const dateKeys = Object.keys(row).filter(k => k.match(/[0-9/]{6,}/));\n    dateKeys.forEach(date => {\n      const reformattedDate = moment(date, 'M/D/YY').format('D.M.YY');\n      destination[country][key][reformattedDate] = parseInt(row[date]) + (destination[country][key][reformattedDate] | 0);\n    });\n  }\n};\n\nconst getCountrySummary = (byCountry: TByCountry): TByCountrySummary => {\n  const byCountrySummary: TByCountrySummary = {};\n  Object.keys(byCountry).forEach((country) => {\n    const confKeys = Object.keys(byCountry[country].confirmed);\n    const recKeys = Object.keys(byCountry[country].recovered);\n    const deKeys = Object.keys(byCountry[country].deaths);\n    const confirmed = byCountry[country].confirmed[confKeys[confKeys.length - 1]];\n    const recovered = byCountry[country].recovered[recKeys[recKeys.length - 1]];\n    const deaths = byCountry[country].deaths[deKeys[deKeys.length - 1]];\n    byCountrySummary[country] = {\n      confirmed,\n      recovered,\n      deaths,\n      active: confirmed - recovered - deaths,\n    };\n  });\n  return byCountrySummary;\n};\n\nasync function getCsvData(url: string) {\n  let csvData = await fetchCsv(url);\n\n  return Papa.parse(csvData, { header: true });\n}\n\nasync function fetchCsv(url: string) {\n  return fetch(url).then(function (response) {\n    if (!response.body) {\n      return '';\n    }\n    let reader = response.body.getReader();\n    let decoder = new TextDecoder('utf-8');\n\n    return reader.read().then(function (result) {\n      return decoder.decode(result.value);\n    });\n  });\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}